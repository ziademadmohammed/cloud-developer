app: serverless-todo-app
service:
  name: udacity-c4-todo

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

package:
  individually: true
    
provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing: 
    lambda: true
    apiGateway: true
    
  logs:
    restApi: true 

  environment:
    TODOS_TABLE: ${self:service.name}-Todos-${self:provider.stage}    
    TODOS_INDEX_CREATED_AT: ${self:service.name}-Todos-Index-CreatedAt-${self:provider.stage}
    TODOS_IMAGES_BUCKET: ${self:service.name}-todos-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: TO-DO App API
        description: Serverless application for task management
    models:
      - name: CreateTodoRequestSchema
        contentType: application/json
        schema: ${file(src/schemas/CreateTodoRequestSchema.json)}
      - name: UpdateTodoRequestSchema
        contentType: application/json
        schema: ${file(src/schemas/UpdateTodoRequestSchema.json)}

functions:

  Auth: 
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
          documentation:
            summary: "Get Todos"
            description: "Get the todos of a user"
            tags:
              - Todo
              - Get          
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_INDEX_CREATED_AT}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: "Create a Todo"
            description: "Create a new Todo item"
            tags:
              - Todo
              - Create
            requestModels:
              "application/json": CreateTodoRequestSchema          
    iamRoleStatements:
      - Effect: Allow
        Action:  
          - dynamodb:PutItem        
        Resource:
          - { "Fn::GetAtt": ["TodosDynamoDBTable", "Arn" ] }
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: "Update a Todo"
            description: "Modify an existing Todo item"
            tags:
              - Todo
              - Update
            requestModels:
              "application/json": UpdateTodoRequestSchema            
    iamRoleStatements:
      - Effect: Allow
        Action:  
          - dynamodb:UpdateItem        
        Resource:
          - { "Fn::GetAtt": ["TodosDynamoDBTable", "Arn" ] }
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'   
                    
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          documentation:
            summary: "Delete a Todo"
            description: "Delete a Todo item from its id"
            tags:
              - Todo
              - Delete       
    iamRoleStatements:
      - Effect: Allow
        Action:  
          - dynamodb:DeleteItem        
        Resource:
          - { "Fn::GetAtt": ["TodosDynamoDBTable", "Arn" ] }
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'                           

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true  
          documentation:
            summary: "Signed url and attachmentUrl update"
            description: "Generate a signed url and update/add the attachmentUrl property to the todo"
            tags:
              - Todo
              - Update                 
    iamRoleStatements:
      - Effect: Allow
        Action:  
          - dynamodb:UpdateItem        
        Resource:
          - { "Fn::GetAtt": ["TodosDynamoDBTable", "Arn" ] }    
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_BUCKET}/*       
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'                

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi    

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi              

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        KeySchema: 
          - AttributeName: userId
            KeyType: HASH 
          - AttributeName: todoId
            KeyType: RANGE 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}  
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_INDEX_CREATED_AT}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL 

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false           

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_IMAGES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_IMAGES_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket        